name: Deploy Backend to AWS ECS

on:
  push:
    branches: [ deploy-beta ]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: monitoria-backend
  ECS_SERVICE: monitoria-backend-service
  ECS_CLUSTER: monitoria-cluster
  ECS_TASK_DEFINITION: backend/ecs-task-definition.json
  CONTAINER_NAME: monitoria-backend

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Check if ECS service exists
      id: check-service
      run: |
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Get default VPC and subnets
      if: steps.check-service.outputs.exists == 'false'
      id: get-vpc-info
      run: |
        # Get default VPC
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text --region ${{ env.AWS_REGION }})
        
        # Get public subnets
        SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[?MapPublicIpOnLaunch==`true`].SubnetId' --output text --region ${{ env.AWS_REGION }} | tr '\t' ',')
        
        # Get default security group
        SG_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" --query 'SecurityGroups[0].GroupId' --output text --region ${{ env.AWS_REGION }})
        
        echo "vpc-id=$VPC_ID" >> $GITHUB_OUTPUT
        echo "subnets=$SUBNETS" >> $GITHUB_OUTPUT
        echo "security-group=$SG_ID" >> $GITHUB_OUTPUT

    - name: Create ECS service if it doesn't exist
      if: steps.check-service.outputs.exists == 'false'
      run: |
        aws ecs create-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name ${{ env.ECS_SERVICE }} \
          --task-definition ${{ steps.task-def.outputs.task-definition }} \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ steps.get-vpc-info.outputs.subnets }}],securityGroups=[${{ steps.get-vpc-info.outputs.security-group }}],assignPublicIp=ENABLED}" \
          --region ${{ env.AWS_REGION }}

    - name: Deploy Amazon ECS task definition
      if: steps.check-service.outputs.exists == 'true'
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        echo "âœ… Backend deployed successfully!"
        echo "Service: ${{ env.ECS_SERVICE }}"
        echo "Cluster: ${{ env.ECS_CLUSTER }}"
        echo "Image: ${{ steps.build-image.outputs.image }}"
